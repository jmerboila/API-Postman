{
	"info": {
		"_postman_id": "5a84bfc2-d92d-45e5-b2b9-39196684c162",
		"name": "Simple Grocery Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19144030"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "API STATUS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// const response = pm.response.json();\r",
									"\r",
									"// pm.test('Status is UP', () => {\r",
									"//     pm.expect(response.status).to.eql('UP');\r",
									"//     });\r",
									"\r",
									"// console.log(response.status)    ;\r",
									"\r",
									"// const name = 'Jamie'\r",
									"// pm.collectionVariables.set('firstName', name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/status",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('At least one available product exists', () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    pm.expect(response).to.be.an('array');\r",
									"    pm.expect(response.length).to.be.above(0);\r",
									"\r",
									"    const product = response[0];\r",
									"    pm.expect(product).to.be.an('object');\r",
									"    pm.expect(product).to.haveOwnProperty('id');\r",
									"    pm.expect(product.id).to.be.a('number');\r",
									"    pm.expect(product).to.haveOwnProperty('inStock');\r",
									"    pm.expect(product.inStock).to.be.true;\r",
									"\r",
									"    pm.collectionVariables.set('productId', product.id);    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products/?category=coffee&results=20",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products",
								""
							],
							"query": [
								{
									"key": "category",
									"value": "coffee"
								},
								{
									"key": "results",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is an object\", () => {\r",
									"pm.expect(response).to.be.an('object');\r",
									"});\r",
									"\r",
									"console.log(response);\r",
									"\r",
									"pm.test('Correct product was retrieved', () => {\r",
									"    const requestedProductId = pm.collectionVariables.get('productId');\r",
									"    console.log(requestedProductId);\r",
									"    pm.expect(response.id).to.eql(requestedProductId);\r",
									"});\r",
									"\r",
									"pm.test(\"Product name\", () => {\r",
									"pm.expect(response.name).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products/:productid?product-label=true",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products",
								":productid"
							],
							"query": [
								{
									"key": "product-label",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "productid",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Cart Id is valid!', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response).to.haveOwnProperty('cartId');\r",
									"    pm.expect(response.cartId).to.be.a('string');\r",
									"    pm.collectionVariables.set('cartId', response.cartId);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/carts/:cartId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/carts/:cartId/items/",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								""
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add an item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test('Item was created', () => {\r",
									"const response = pm.response.json();\r",
									"pm.expect(response).to.be.an('object');\r",
									"pm.expect(response.created).to.be.true;\r",
									"pm.expect(response.itemId).to.be.a('number');\r",
									"\r",
									"\r",
									"pm.collectionVariables.set('lastAddedItemId', response.itemId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": 4643\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/carts/:cartId/items",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/carts/:cartId/items/:itemId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace product in cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": 4646,\r\n    \"quantity\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/carts/:cartId/items/:itemId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item in cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts/:cartId/items/:itemId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register API client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientName\": \"Postman on Jayson's computer\",\r\n    \"clientEmail\": \"jmerboila@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/api-clients",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Order was created', () => {\r",
									"const response = pm.response.json();\r",
									"pm.expect(response).to.be.an('object');\r",
									"pm.expect(response.created).to.be.true;\r",
									"pm.expect(response.orderId).to.be.a('string');\r",
									"\r",
									"\r",
									"pm.collectionVariables.set('orderId', response.orderId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Created order is in the list', () => {\r",
									"const response = pm.response.json();\r",
									"let isOrderIdInResponse = false;\r",
									"response.forEach((order) => {\r",
									"    if (order.id === pm.collectionVariables.get('orderId')){\r",
									"        console.log('Found It!');\r",
									"        isOrderIdInResponse = true;        \r",
									"    }\r",
									"});\r",
									"pm.expect(isOrderIdInResponse).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\": \"This is for Jayson Erboila\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders/:orderid",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders",
								":orderid"
							],
							"variable": [
								{
									"key": "orderid",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/orders/:orderid",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders",
								":orderid"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "orderid",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Error message contains the deleted order id\", () => {\r",
									"    const response = pm.response.json();\r",
									"    const requestedOrderId = pm.collectionVariables.get('orderId');\r",
									"    pm.expect(response).to.haveOwnProperty('error');\r",
									"    pm.expect(response.error).to.contain(requestedOrderId);\r",
									"        pm.expect(response.error).to.include(requestedOrderId);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/orders/:orderid",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders",
								":orderid"
							],
							"variable": [
								{
									"key": "orderid",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Missing Header",
							"item": [
								{
									"name": "Create an order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Error message\", () => {\r",
													"    const response = pm.response.json();\r",
													"    pm. expect(response.error).to.eql('Missing Authorization header.')\r",
													"}\r",
													")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"lEGD4m2DJSosfySZjp-Ju\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orders",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Error message\", () => {\r",
													"    const response = pm.response.json();\r",
													"    pm. expect(response.error).to.eql('Missing Authorization header.')\r",
													"}\r",
													")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/orders",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Token",
							"item": [
								{
									"name": "Create an order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Error message\", () => {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.error).to.eql('Invalid bearer token.')\r",
													"}\r",
													")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "e0c1b16ad60ab6292cb0eb6de6cd41c7de057e1168c8e8684bd9a2e7320a1600",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"lEGD4m2DJSosfySZjp-Ju\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orders",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Error message\", () => {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.error).to.eql('Invalid bearer token.')\r",
													"}\r",
													")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "e0c1b16ad60ab6292cb0eb6de6cd41c7de057e1168c8e8684bd9a2e7320a1600",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/orders",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Invalid Inputs",
					"item": [
						{
							"name": "Get All Product - Invalid Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error message\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm. expect(response.error).to.have.string(\"Invalid value for query parameter 'category'.\")\r",
											"}\r",
											")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/products/?category=invalid-category&results=20",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"products",
										""
									],
									"query": [
										{
											"key": "category",
											"value": "invalid-category"
										},
										{
											"key": "results",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Product - Results > Maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error message\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm. expect(response.error).to.have.string(\"Invalid value for query parameter 'results'.\")\r",
											"}\r",
											")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/products/?category=coffee&results=21",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"products",
										""
									],
									"query": [
										{
											"key": "category",
											"value": "coffee"
										},
										{
											"key": "results",
											"value": "21"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Product - Results < Maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error message\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm. expect(response.error).to.have.string(\"Invalid value for query parameter 'results'.\")\r",
											"}\r",
											")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/products/?category=coffee&results=-1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"products",
										""
									],
									"query": [
										{
											"key": "category",
											"value": "coffee"
										},
										{
											"key": "results",
											"value": "-1"
										}
									]
								},
								"description": "This is a test that verifies BVA minimum."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://simple-grocery-store-api.glitch.me"
		},
		{
			"key": "AccessToken",
			"value": "YOUR ACCESS TOKEN",
			"type": "string"
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "cartId",
			"value": ""
		},
		{
			"key": "lastAddedItemId",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "productId",
			"value": ""
		}
	]
}